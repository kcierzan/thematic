name: nvim
os_types:
  - linux
  - darwin
origin_file: ".config/nvim/init.vim"
output_file: "status.vim"
template: |+
  " Do not show mode under the statusline since the statusline itself changes
  " color depending on mode
  set noshowmode

  let NERDTreeStatusline="%8*%=%7*NERD%8*%="

  set laststatus=2
  let g:lightline = {}
  let g:lightline.enable = {
    \  'statusline': 0
    \ }
  set statusline=
  " ~~~~ Statusline configuration ~~~~
  " ':help statusline' is your friend!
  function! RedrawModeColors(mode)
    " Normal mode
    if a:mode == 'n'
      hi MyStatuslineBackground guibg={{light_bg}}
      hi MyStatuslineAccent guifg={{lightest_bg}} guibg={{light_bg}}
      hi MyStatuslineAccentBody  guibg={{lightest_bg}} guifg={{xcolors_04}}
      hi MyStatuslineAccentLabel guifg={{xcolors_02}} guibg={{lightest_bg}}
      hi MyStatuslineFilename  guibg={{lighter_bg}}
      hi MyStatuslineSeparator guifg={{lighter_bg}} guibg={{light_bg}}
      hi MyStatuslineModified guifg={{lighter_bg}} guibg={{light_bg}}
      hi MyStatuslineFiletype guifg={{lighter_bg}} guibg={{light_bg}}
      hi MyStatuslineFiletypeBody guibg={{lighter_bg}} guifg={{xcolors_05}}

      hi MyStatuslineLineCol guifg={{lighter_bg}} guibg={{light_bg}}
      hi MyStatuslineLineColBody guibg={{lighter_bg}}
      hi MyStatuslineLineCwd guifg={{xcolors_06}} guibg={{lighter_bg}}
      hi MyStatuslineLangServerWarning guibg={{lighter_bg}} guifg={{xcolors_03}}
      hi MyStatuslineLangServerOk guibg={{lighter_bg}} guifg={{xcolors_02}}
      hi MyStatuslineLangServerError guibg={{lighter_bg}} guifg={{xcolors_01}}

    " Insert mode
    elseif a:mode == 'i'
      hi MyStatuslineAccentBody guifg={{xcolors_02}}
    " Replace mode
    elseif a:mode == 'R'
      hi MyStatuslineAccentBody guifg={{xcolors_01}}
    " Visual mode
    elseif a:mode == 'v' || a:mode == 'V' || a:mode == '^V'
      hi MyStatuslineAccentBody guifg={{xcolors_05}}
    " Command mode
    elseif a:mode == 'c'
      hi MyStatuslineAccentBody guifg={{xcolors_06}}
    " Terminal mode
    elseif a:mode == 't'
      hi MyStatuslineAccentBody ctermbg=8
    endif
    " Return empty string so as not to display anything in the statusline
    return ''
  endfunction

  function! SetModifiedSymbol(modified)
      if a:modified == 1
      hi MyStatuslineModifiedBody guibg={{lighter_bg}} guifg={{xcolors_01}}
      else
      hi MyStatuslineModifiedBody guibg={{lighter_bg}} guifg={{xcolors_02}}
      endif
      return "\u25CF"
  endfunction


  function! SetFiletype(filetype)
    if a:filetype == ''
        return '-'
    else
      return  WebDevIconsGetFileTypeSymbol() . ' ' . a:filetype
    endif
  endfunction

  function! ALEWarnings()
    let l:counts = ale#statusline#Count(bufnr(''))
    let l:errors = l:counts.error + l:counts.style_error
    let l:warnings = l:counts.total - l:errors
    let l:status = ''

    if l:warnings > 0
      let l:status = "  " . l:warnings
    endif

    return l:status
  endfunction

  function! ALEErrors()
    let l:counts = ale#statusline#Count(bufnr(''))
    let l:errors = l:counts.error + l:counts.style_error
    let l:warnings = l:counts.total - l:errors
    let l:status = ''

    if l:errors > 0
      let l:status = "  " . l:errors
    endif

    if l:warnings > 0
      let l:status = l:status . " "
    endif

    return l:status
  endfunction

  function! ALEOk()
    let l:counts = ale#statusline#Count(bufnr(''))
    let l:errors = l:counts.error + l:counts.style_error
    let l:warnings = l:counts.total - l:errors
    let l:status = ''

    if l:errors == 0 && l:warnings == 0
      let l:status = "  "
    endif

    return l:status
  endfunction

  " Statusbar items
  " ====================================================================

  " This will not be displayed, but the function RedrawModeColors will be
  " called every time the mode changes, thus updating the colors used for the
  " components.
  set statusline=%{RedrawModeColors(mode())}
